#include "constants.h"
#include <unistd.h>
#include <stdio.h>
#include <wiringPi.h>
#include "motor_control.h"
#include "encoder_control.h" // Include the encoder header for integration

// Step sequence for the 28BYJ-48 motor
int step_sequence[8][4] = {
    {1, 0, 0, 0},
    {1, 1, 0, 0},
    {0, 1, 0, 0},
    {0, 1, 1, 0},
    {0, 0, 1, 0},
    {0, 0, 1, 1},
    {0, 0, 0, 1},
    {1, 0, 0, 1}
};

void initializeMotor() {
    // Initialize wiringPi
    wiringPiSetupGpio(); // Use BCM GPIO numbering

    // Set the pins as outputs
    pinMode(IN1, OUTPUT);
    pinMode(IN2, OUTPUT);
    pinMode(IN3, OUTPUT);
    pinMode(IN4, OUTPUT);

    // Initialize the encoder
    initializeEncoder();
    resetEncoder();
}

void rotateMotorWithEncoder(int steps, int direction, int stop_threshold) {
    int encoderPosition = getEncoderPosition();
    printf("Starting motor rotation. Initial Encoder Position: %d\n", encoderPosition);

    for (int i = 0; i < steps; i++) {
        for (int j = 0; j < 8; j++) {
            int step_index = direction > 0 ? j : 7 - j; // Reverse step sequence for counterclockwise
            digitalWrite(IN1, step_sequence[step_index][0]);
            digitalWrite(IN2, step_sequence[step_index][1]);
            digitalWrite(IN3, step_sequence[step_index][2]);
            digitalWrite(IN4, step_sequence[step_index][3]);
            usleep(1000); // Short delay

            // Update and log encoder position
            encoderPosition = getEncoderPosition();
            printf("Encoder Position: %d\n", encoderPosition);

            // Stop motor if the threshold is reached
            if ((direction > 0 && encoderPosition >= stop_threshold) ||
                (direction < 0 && encoderPosition <= stop_threshold)) {
                printf("Encoder threshold reached: %d\n", encoderPosition);
                return;
            }
        }
    }
    printf("Motor rotation complete. Final Encoder Position: %d\n", encoderPosition);
}

void openWindow() {
    int current_position = getEncoderPosition();
    printf("Opening window. Current Encoder Position: %d\n", current_position);

    if (current_position >= OPEN_THRESHOLD) {
        printf("Window is already fully open. No further action needed.\n");
        return;
    }

    // Rotate in the direction to increase encoder position until the open threshold is reached
    rotateMotorWithEncoder(STEPS_PER_REV * 2, 1, OPEN_THRESHOLD);

    printf("Window opened. Final Encoder Position: %d\n", getEncoderPosition());
}

void closeWindow() {
    int current_position = getEncoderPosition();
    printf("Closing window. Current Encoder Position: %d\n", current_position);

    if (current_position <= CLOSE_THRESHOLD) {
        printf("Window is already fully closed. No further action needed.\n");
        return;
    }

    // Rotate in the direction to decrease encoder position until the close threshold is reached
    rotateMotorWithEncoder(STEPS_PER_REV * 2, -1, CLOSE_THRESHOLD);

    printf("Window closed. Final Encoder Position: %d\n", getEncoderPosition());
}




